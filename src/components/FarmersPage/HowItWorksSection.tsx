import React, { useEffect, useRef } from "react";
import { Box, Typography, Grid } from "@mui/material";
import { motion, useAnimation, useInView } from "framer-motion";
import coverVideo from "../../assets/cover_video_digit.mp4";
import StepIcon1 from "@mui/icons-material/TaskAlt"; 
import StepIcon2 from "@mui/icons-material/Build";
import StepIcon3 from "@mui/icons-material/CheckCircle";

// Data for both columns
const steps = [
  {
    side: "left",
    icon: <StepIcon1 sx={{ fontSize: 40, color: "#4CAF50" }} />,
    title: "Step 1: Reality",
    description:
      "The operator starts a task from the list of tasks generated by the administrator.",
  },
  {
    side: "right",
    icon: <StepIcon1 sx={{ fontSize: 40, color: "#FF7043" }} />,
    title: "Step 1: In-App",
    description:
      "DigiT opens an activity ticket for that specific task, including necessary resources, execution schedule, location, weather, and safety parameters.",
  },
  {
    side: "left",
    icon: <StepIcon2 sx={{ fontSize: 40, color: "#4CAF50" }} />,
    title: "Step 2: Reality",
    description:
      "The operator selects the vehicle/equipment, necessary resources, and starts executing the task.",
  },
  {
    side: "right",
    icon: <StepIcon2 sx={{ fontSize: 40, color: "#FF7043" }} />,
    title: "Step 2: In-App",
    description:
      "The ticket's status updates continuously until the task is confirmed as complete, based on data received from the operator's device.",
  },
  {
    side: "left",
    icon: <StepIcon3 sx={{ fontSize: 40, color: "#4CAF50" }} />,
    title: "Step 3: Reality",
    description:
      "The task is closed by the operator, and all data from the task is uploaded to the platform!",
  },
  {
    side: "right",
    icon: <StepIcon3 sx={{ fontSize: 40, color: "#FF7043" }} />,
    title: "Step 3: In-App",
    description:
      "The ticket is finalized, and the resulting data report after task completion is recorded and locked to update the company's inventory and activity indicators.",
  },
];

const HowItWorksSection: React.FC = () => {
  const controls = useAnimation();
  const ref = useRef(null);
  const inView = useInView(ref, { once: true });

  useEffect(() => {
    if (inView) {
      controls.start("visible");
    } else {
      controls.start("hidden");
    }
  }, [controls, inView]);

  // Variants for animations
  const variants = {
    hidden: { opacity: 0, y: 50 },
    visible: {
      opacity: 1,
      y: 0,
      transition: {
        duration: 0.8,
        ease: "easeOut",
      },
    },
  };

  return (
    <Box
      sx={{
        py: 10,
        px: 4,
        background: "linear-gradient(135deg, #f0f4f8, #ffffff)",
        textAlign: "center",
        position: "relative",
      }}
    >
      <Typography
        variant="h4"
        sx={{
          mb: 8,
          fontWeight: "bold",
          color: "#2F4F4F",
        }}
      >
        How It Works
      </Typography>

      <Grid container spacing={8} justifyContent="center" ref={ref}>
        {steps.map((step, index) => (
          <Grid
            item
            xs={12}
            md={5}
            key={index}
            sx={{
              display: "flex",
              flexDirection: step.side === "left" ? "row" : "row-reverse",
              alignItems: "center",
              position: "relative",
            }}
          >
            {/* Connecting Lines */}
            {index % 2 === 1 && (
              <Box
                sx={{
                  position: "absolute",
                  top: "50%",
                  left: "50%",
                  transform: "translate(-50%, -50%)",
                  width: "2px",
                  height: "100px",
                  backgroundColor: "#ccc",
                }}
              />
            )}

            {/* Step Content with Motion */}
            <motion.div
              animate={controls}
              initial="hidden"
              variants={variants}
              whileHover={{ scale: 1.05 }}
              transition={{ type: "spring", stiffness: 300 }}
              style={{
                width: "100%",
                display: "flex",
                justifyContent:
                  step.side === "left" ? "flex-end" : "flex-start",
                padding: "30px",
                borderRadius: "20px",
                background:
                  step.side === "left"
                    ? "linear-gradient(135deg, #e0f7fa, #ffffff)"
                    : "linear-gradient(135deg, #ffe0b2, #ffffff)",
                color: "#2F4F4F",
                boxShadow: "0 12px 30px rgba(0, 0, 0, 0.15)",
                position: "relative",
                marginBottom: "30px",
                maxWidth: "400px",
                marginLeft: step.side === "left" ? "auto" : "0",
                marginRight: step.side === "right" ? "auto" : "0",
                border:
                  step.side === "left"
                    ? "2px solid #4CAF50"
                    : "2px solid #FF7043",
                transition: "transform 0.3s ease, box-shadow 0.3s ease",
                overflow: "hidden",
              }}
            >
              {/* Background Pattern for Depth */}
              <Box
                sx={{
                  position: "absolute",
                  top: 0,
                  left: 0,
                  right: 0,
                  bottom: 0,
                  background:
                    "radial-gradient(circle, rgba(255,255,255,0.2), transparent 70%)",
                  zIndex: 0,
                }}
              />
              <Box
                sx={{ display: "flex", alignItems: "center", mr: 2, zIndex: 1 }}
              >
                {step.icon}
              </Box>
              <Box sx={{ zIndex: 1 }}>
                <Typography variant="h6" sx={{ fontWeight: "bold", mb: 2 }}>
                  {step.title}
                </Typography>
                <Typography variant="body1">{step.description}</Typography>
              </Box>
            </motion.div>
          </Grid>
        ))}
      </Grid>

      {/* Central Device Image */}
      <Box
        sx={{
          mt: 10,
          textAlign: "center",
        }}
      >
        <motion.div
          initial={{ opacity: 0, scale: 0.9 }}
          animate={{ opacity: 1, scale: 1 }}
          transition={{ duration: 0.8 }}
          whileHover={{ scale: 1.05 }}
        >
          {/* Replacing the img tag with video */}
          <video
            src={coverVideo}
            autoPlay
            loop
            muted
            style={{
              width: "100%",
              maxWidth: "500px",
              margin: "auto",
              borderRadius: "20px",
              boxShadow: "0 12px 24px rgba(0, 0, 0, 0.2)",
            }}
          />
        </motion.div>
      </Box>
    </Box>
  );
};

export default HowItWorksSection;
